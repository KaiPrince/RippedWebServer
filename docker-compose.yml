version: "3.8"
services:
  web-ui:
    build: ./web-ui
    environment:
      FILES_SERVICE_URL: http://rippedwebserver_files_1:5000
      DISK_STORAGE_SERVICE_URL: http://rippedwebserver_disk_storage_1:5000
      AUTH_SERVICE_URL: http://rippedwebserver_auth_1:5000
    ports:
      - 5000:5000

  auth:
    build: ./auth
    ports:
      - 5001:5000

  disk_storage:
    build: ./disk_storage
    environment:
      UPLOAD_FOLDER: /upload
    ports:
      - 5002:5000
    volumes:
      - files:/upload

  files:
    build: ./files
    environment:
      DATABASE: /db/files_db.sqlite
      DISK_STORAGE_SERVICE_URL: http://rippedwebserver_disk_storage_1:5000
      AUTH_SERVICE_URL: http://rippedwebserver_auth_1:5000
    ports:
      - 5003:5000
    volumes:
      - db:/db

volumes:
  db:
  files:
#   db:
#     image: postgres:9.4
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     networks:
#       - backend
#     deploy:
#       placement:
#         max_replicas_per_node: 1
#         constraints:
#           - "node.role==manager"

#   vote:
#     image: dockersamples/examplevotingapp_vote:before
#     ports:
#       - "5000:80"
#     networks:
#       - frontend
#     depends_on:
#       - redis
#     deploy:
#       replicas: 2
#       update_config:
#         parallelism: 2
#       restart_policy:
#         condition: on-failure

#   result:
#     image: dockersamples/examplevotingapp_result:before
#     ports:
#       - "5001:80"
#     networks:
#       - backend
#     depends_on:
#       - db
#     deploy:
#       replicas: 1
#       update_config:
#         parallelism: 2
#         delay: 10s
#       restart_policy:
#         condition: on-failure

#   worker:
#     image: dockersamples/examplevotingapp_worker
#     networks:
#       - frontend
#       - backend
#     deploy:
#       mode: replicated
#       replicas: 1
#       labels: [APP=VOTING]
#       restart_policy:
#         condition: on-failure
#         delay: 10s
#         max_attempts: 3
#         window: 120s
#       placement:
#         constraints:
#           - "node.role==manager"

#   visualizer:
#     image: dockersamples/visualizer:stable
#     ports:
#       - "8080:8080"
#     stop_grace_period: 1m30s
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock"
#     deploy:
#       placement:
#         constraints:
#           - "node.role==manager"

# networks:
#   frontend:
#   backend:

# volumes:
#   db-data:
